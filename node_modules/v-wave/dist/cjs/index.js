'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var DEFAULT_PLUGIN_OPTIONS = {
    directive: 'wave',
    color: 'currentColor',
    initialOpacity: 0.2,
    finalOpacity: 0.1,
    duration: 0.4,
    dissolveDuration: 0.15,
    easing: 'ease-out',
    cancellationPeriod: 75,
    trigger: 'auto',
    tagName: 'div'
};

var isVue3 = function (app) { return 'config' in app && 'globalProperties' in app.config; };

var getHooks = function (app) {
    var vue3;
    if (app === 'vue2')
        vue3 = false;
    else if (app === 'vue3')
        vue3 = true;
    else
        vue3 = isVue3(app);
    return vue3
        ? {
            mounted: 'mounted',
            updated: 'updated'
        }
        : {
            mounted: 'inserted',
            updated: 'componentUpdated'
        };
};

var triggerIsID = function (trigger) { return typeof trigger === 'string' && trigger !== 'auto'; };

var markWaveBoundary = function (el, trigger) {
    el.dataset.vWaveBoundary = triggerIsID(trigger) ? trigger : 'true';
};

var createContainer = function (_a, tagName) {
    var borderTopLeftRadius = _a.borderTopLeftRadius, borderTopRightRadius = _a.borderTopRightRadius, borderBottomLeftRadius = _a.borderBottomLeftRadius, borderBottomRightRadius = _a.borderBottomRightRadius;
    var waveContainer = document.createElement(tagName);
    waveContainer.style.top = '0';
    waveContainer.style.left = '0';
    waveContainer.style.width = '100%';
    waveContainer.style.height = '100%';
    waveContainer.style.display = 'block';
    waveContainer.style.position = 'absolute';
    waveContainer.style.borderRadius = "".concat(borderTopLeftRadius, " ").concat(borderTopRightRadius, " ").concat(borderBottomRightRadius, " ").concat(borderBottomLeftRadius);
    waveContainer.style.overflow = 'hidden';
    waveContainer.style.pointerEvents = 'none';
    waveContainer.style.webkitMaskImage = '-webkit-radial-gradient(white, black)';
    return waveContainer;
};

var createWaveElement = function (x, y, size, options) {
    var waveElement = document.createElement('div');
    waveElement.style.position = 'absolute';
    waveElement.style.width = "".concat(size, "px");
    waveElement.style.height = "".concat(size, "px");
    waveElement.style.top = "".concat(y, "px");
    waveElement.style.left = "".concat(x, "px");
    waveElement.style.background = options.color;
    waveElement.style.borderRadius = '50%';
    waveElement.style.opacity = "".concat(options.initialOpacity);
    waveElement.style.transform = "translate(-50%,-50%) scale(0)";
    waveElement.style.transition = "transform ".concat(options.duration, "s ").concat(options.easing, ", opacity ").concat(options.duration, "s ").concat(options.easing);
    return waveElement;
};

function magnitude(x1, y1, x2, y2) {
    var deltaX = x1 - x2;
    var deltaY = y1 - y2;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
}

function getDistanceToFurthestCorner(x, y, _a) {
    var width = _a.width, height = _a.height;
    var topLeft = magnitude(x, y, 0, 0);
    var topRight = magnitude(x, y, width, 0);
    var bottomLeft = magnitude(x, y, 0, height);
    var bottomRight = magnitude(x, y, width, height);
    return Math.max(topLeft, topRight, bottomLeft, bottomRight);
}

var getRelativePointer = function (_a, _b) {
    var x = _a.x, y = _a.y;
    var top = _b.top, left = _b.left;
    return ({
        x: x - left,
        y: y - top
    });
};

var WAVE_COUNT = 'vWaveCountInternal';
function incrementWaveCount(el) {
    var count = getWaveCount(el);
    setWaveCount(el, count + 1);
}
function decrementWaveCount(el) {
    var count = getWaveCount(el);
    setWaveCount(el, count - 1);
}
function setWaveCount(el, count) {
    el.dataset[WAVE_COUNT] = count.toString();
}
function getWaveCount(el) {
    var _a;
    return parseInt((_a = el.dataset[WAVE_COUNT]) !== null && _a !== void 0 ? _a : '0', 10);
}
function deleteWaveCount(el) {
    delete el.dataset[WAVE_COUNT];
}

var wave = function (event, el, options) {
    var rect = el.getBoundingClientRect();
    var computedStyles = window.getComputedStyle(el);
    var _a = getRelativePointer(event, rect), x = _a.x, y = _a.y;
    var size = 2.05 * getDistanceToFurthestCorner(x, y, rect);
    var waveContainer = createContainer(computedStyles, options.tagName);
    var waveEl = createWaveElement(x, y, size, options);
    incrementWaveCount(el);
    var originalPositionValue = '';
    if (computedStyles.position === 'static') {
        if (el.style.position)
            originalPositionValue = el.style.position;
        el.style.position = 'relative';
    }
    waveContainer.appendChild(waveEl);
    el.appendChild(waveContainer);
    var shouldDissolveWave = false;
    var releaseWave = function (e) {
        if (typeof e !== 'undefined') {
            document.removeEventListener('pointerup', releaseWave);
            document.removeEventListener('pointercancel', releaseWave);
        }
        if (shouldDissolveWave)
            dissolveWave();
        else
            shouldDissolveWave = true;
    };
    var dissolveWave = function () {
        waveEl.style.transition = "opacity ".concat(options.dissolveDuration, "s linear");
        waveEl.style.opacity = '0';
        setTimeout(function () {
            waveContainer.remove();
            decrementWaveCount(el);
            if (getWaveCount(el) === 0) {
                deleteWaveCount(el);
                el.style.position = originalPositionValue;
            }
        }, options.dissolveDuration * 1000);
    };
    document.addEventListener('pointerup', releaseWave);
    document.addEventListener('pointercancel', releaseWave);
    var token = setTimeout(function () {
        document.removeEventListener('pointercancel', cancelWave);
        requestAnimationFrame(function () {
            waveEl.style.transform = "translate(-50%,-50%) scale(1)";
            waveEl.style.opacity = "".concat(options.finalOpacity);
            setTimeout(function () { return releaseWave(); }, options.duration * 1000);
        });
    }, options.cancellationPeriod);
    var cancelWave = function () {
        clearTimeout(token);
        waveContainer.remove();
        document.removeEventListener('pointerup', releaseWave);
        document.removeEventListener('pointercancel', releaseWave);
        document.removeEventListener('pointercancel', cancelWave);
    };
    document.addEventListener('pointercancel', cancelWave);
};

var optionMap = new WeakMap();
var createDirective = function (globalUserOptions, app) {
    var _a, _b;
    if (globalUserOptions === void 0) { globalUserOptions = {}; }
    if (app === void 0) { app = 'vue3'; }
    var globalOptions = __assign(__assign({}, DEFAULT_PLUGIN_OPTIONS), globalUserOptions);
    var hooks = getHooks(app);
    var handleTrigger = function (event) {
        var trigger = event.currentTarget.dataset.vWaveTrigger;
        var associatedElements = document.querySelectorAll("[data-v-wave-boundary=\"".concat(trigger, "\"]"));
        associatedElements.forEach(function (el) { return wave(event, el, __assign(__assign({}, globalOptions), optionMap.get(el))); });
    };
    var waveDirective = (_a = {},
        _a[hooks.mounted] = function (el, _a) {
            var _b;
            var _c = _a.value, value = _c === void 0 ? {} : _c;
            optionMap.set(el, value);
            markWaveBoundary(el, (_b = (value && value.trigger)) !== null && _b !== void 0 ? _b : globalOptions.trigger);
            el.addEventListener('pointerdown', function (event) {
                if (optionMap.get(el) === false)
                    return;
                var options = __assign(__assign({}, globalOptions), optionMap.get(el));
                if (options.trigger === false)
                    return wave(event, el, options);
                if (triggerIsID(options.trigger))
                    return;
                var trigger = el.querySelector('[data-v-wave-trigger="true"]');
                if (!trigger && options.trigger === true)
                    return;
                if (trigger && !event.composedPath().includes(trigger))
                    return;
                wave(event, el, options);
            });
        },
        _a[hooks.updated] = function (el, _a) {
            var _b;
            var _c = _a.value, value = _c === void 0 ? {} : _c;
            optionMap.set(el, value);
            markWaveBoundary(el, (_b = (value && value.trigger)) !== null && _b !== void 0 ? _b : globalOptions.trigger);
        },
        _a);
    var triggerDirective = (_b = {},
        _b[hooks.mounted] = function (el, _a) {
            var _b = _a.arg, trigger = _b === void 0 ? 'true' : _b;
            el.dataset.vWaveTrigger = trigger;
            if (trigger !== 'true')
                el.addEventListener('pointerdown', handleTrigger);
        },
        _b[hooks.updated] = function (el, _a) {
            var _b = _a.arg, trigger = _b === void 0 ? 'true' : _b;
            el.dataset.vWaveTrigger = trigger;
            if (trigger === 'true')
                el.removeEventListener('pointerdown', handleTrigger);
            else
                el.addEventListener('pointerdown', handleTrigger);
        },
        _b);
    return {
        wave: waveDirective,
        vWave: waveDirective,
        waveTrigger: triggerDirective,
        vWaveTrigger: triggerDirective
    };
};
var VWave = {
    install: function (app, globalUserOptions) {
        if (globalUserOptions === void 0) { globalUserOptions = {}; }
        if (this.installed)
            return;
        this.installed = true;
        var globalOptions = __assign(__assign({}, DEFAULT_PLUGIN_OPTIONS), globalUserOptions);
        var _a = createDirective(globalOptions, app), vWave = _a.vWave, vWaveTrigger = _a.vWaveTrigger;
        app.directive(globalOptions.directive, vWave);
        app.directive("".concat(globalOptions.directive, "-trigger"), vWaveTrigger);
    },
    installed: false,
    createLocalWaveDirective: createDirective
};

module.exports = VWave;
