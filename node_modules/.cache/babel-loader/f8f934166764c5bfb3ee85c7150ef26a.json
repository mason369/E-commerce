{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport routes from \"./routes\";\nimport store from \"@/store\";\nVue.use(VueRouter);\n\n//重写push、replace防止控制台报错\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\n//重写VueRouter.prototype身上的push方法\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (reject && resolve) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\n\n//重写VueRouter.prototype身上的replace方法\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (reject && resolve) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n};\nlet router = new VueRouter({\n  routes,\n  scrollBehavior() {\n    return {\n      y: 0\n    };\n  }\n});\n\n//全局守卫,前置守卫（在路由跳转之间进行判断)\nrouter.beforeEach(async (to, from, next) => {\n  //to:可以获取到你要跳转到那个路由信息\n  //from:可以获取到你从哪个路由而来的信息\n  //next:放行函数 next()放行 next(path)放行到指令路由\n  next();\n  //用户登录了,才会有token,未登录一定不会有token\n  let name = store.state.user.userInfo.name;\n  let token = store.state.user.token;\n  if (token) {\n    //登录后组织跳转login\n    if (to.path == \"/login\" || to.path == \"/register\") {\n      next(\"/\");\n    } else {\n      // 登陆了,但是去的不是login和regster且拥有用户信息放行\n      if (name) {\n        next();\n      } else {\n        //没有用户信息,派发action让仓库存储用户信息再跳转\n        try {\n          await store.dispatch(\"getUserInfo\");\n          //获取用户信息成功\n          next();\n        } catch (error) {\n          //token失效了,获取不到用户信息，重新登录\n          //清除token\n          await store.dispatch(\"userLogOut\");\n          next(\"/login\");\n        }\n      }\n    }\n  } else {\n    //未登录:不能去交易相关、不能去支付相关【pay |paysuccess】、不能去个人中心\n    let toPath = to.path;\n    //如果去trade\n    if (toPath.indeOf('/trade') != -1) {\n      next(\"/login\");\n    } else {\n      next();\n    }\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","routes","store","use","originPush","prototype","push","originReplace","replace","location","resolve","reject","call","router","scrollBehavior","y","beforeEach","to","from","next","name","state","user","userInfo","token","path","dispatch","error","toPath","indeOf"],"sources":["D:/E-commerce/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport routes from \"./routes\";\nimport store from \"@/store\";\n\nVue.use(VueRouter);\n\n//重写push、replace防止控制台报错\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\n//重写VueRouter.prototype身上的push方法\nVueRouter.prototype.push = function (location, resolve, reject) {\n    if (reject && resolve) {\n        originPush.call(this, location, resolve, reject);\n    } else {\n        originPush.call(\n            this,\n            location,\n            () => {},\n            () => {},\n        );\n    }\n};\n\n//重写VueRouter.prototype身上的replace方法\nVueRouter.prototype.replace = function (location, resolve, reject) {\n    if (reject && resolve) {\n        originReplace.call(this, location, resolve, reject);\n    } else {\n        originReplace.call(\n            this,\n            location,\n            () => {},\n            () => {},\n        );\n    }\n};\n\nlet router = new VueRouter({\n    routes,\n    scrollBehavior() {\n        return { y: 0 };\n    },\n});\n\n//全局守卫,前置守卫（在路由跳转之间进行判断)\nrouter.beforeEach(async (to, from, next) => {\n    //to:可以获取到你要跳转到那个路由信息\n    //from:可以获取到你从哪个路由而来的信息\n    //next:放行函数 next()放行 next(path)放行到指令路由\n    next();\n    //用户登录了,才会有token,未登录一定不会有token\n    let name = store.state.user.userInfo.name;\n    let token = store.state.user.token;\n    if (token) {\n        //登录后组织跳转login\n        if (to.path == \"/login\" || to.path == \"/register\") {\n            next(\"/\");\n        } else {\n            // 登陆了,但是去的不是login和regster且拥有用户信息放行\n            if (name) {\n                next();\n            } else {\n                //没有用户信息,派发action让仓库存储用户信息再跳转\n                try {\n                    await store.dispatch(\"getUserInfo\");\n                    //获取用户信息成功\n                    next();\n                } catch (error) {\n                    //token失效了,获取不到用户信息，重新登录\n                    //清除token\n                    await store.dispatch(\"userLogOut\");\n                    next(\"/login\");\n                }\n            }\n        }\n    } else {\n        //未登录:不能去交易相关、不能去支付相关【pay |paysuccess】、不能去个人中心\n        let toPath = to.path;\n        //如果去trade\n        if (toPath.indeOf('/trade')!=-1) {\n            next(\"/login\");\n        } else {\n            next();\n        }\n    }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAE3BH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;;AAElB;AACA,IAAII,UAAU,GAAGJ,SAAS,CAACK,SAAS,CAACC,IAAI;AACzC,IAAIC,aAAa,GAAGP,SAAS,CAACK,SAAS,CAACG,OAAO;;AAE/C;AACAR,SAAS,CAACK,SAAS,CAACC,IAAI,GAAG,UAAUG,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC5D,IAAIA,MAAM,IAAID,OAAO,EAAE;IACnBN,UAAU,CAACQ,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACpD,CAAC,MAAM;IACHP,UAAU,CAACQ,IAAI,CACX,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACX;EACL;AACJ,CAAC;;AAED;AACAT,SAAS,CAACK,SAAS,CAACG,OAAO,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC/D,IAAIA,MAAM,IAAID,OAAO,EAAE;IACnBH,aAAa,CAACK,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACvD,CAAC,MAAM;IACHJ,aAAa,CAACK,IAAI,CACd,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACX;EACL;AACJ,CAAC;AAED,IAAII,MAAM,GAAG,IAAIb,SAAS,CAAC;EACvBC,MAAM;EACNa,cAAc,GAAG;IACb,OAAO;MAAEC,CAAC,EAAE;IAAE,CAAC;EACnB;AACJ,CAAC,CAAC;;AAEF;AACAF,MAAM,CAACG,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACxC;EACA;EACA;EACAA,IAAI,EAAE;EACN;EACA,IAAIC,IAAI,GAAGlB,KAAK,CAACmB,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACH,IAAI;EACzC,IAAII,KAAK,GAAGtB,KAAK,CAACmB,KAAK,CAACC,IAAI,CAACE,KAAK;EAClC,IAAIA,KAAK,EAAE;IACP;IACA,IAAIP,EAAE,CAACQ,IAAI,IAAI,QAAQ,IAAIR,EAAE,CAACQ,IAAI,IAAI,WAAW,EAAE;MAC/CN,IAAI,CAAC,GAAG,CAAC;IACb,CAAC,MAAM;MACH;MACA,IAAIC,IAAI,EAAE;QACND,IAAI,EAAE;MACV,CAAC,MAAM;QACH;QACA,IAAI;UACA,MAAMjB,KAAK,CAACwB,QAAQ,CAAC,aAAa,CAAC;UACnC;UACAP,IAAI,EAAE;QACV,CAAC,CAAC,OAAOQ,KAAK,EAAE;UACZ;UACA;UACA,MAAMzB,KAAK,CAACwB,QAAQ,CAAC,YAAY,CAAC;UAClCP,IAAI,CAAC,QAAQ,CAAC;QAClB;MACJ;IACJ;EACJ,CAAC,MAAM;IACH;IACA,IAAIS,MAAM,GAAGX,EAAE,CAACQ,IAAI;IACpB;IACA,IAAIG,MAAM,CAACC,MAAM,CAAC,QAAQ,CAAC,IAAE,CAAC,CAAC,EAAE;MAC7BV,IAAI,CAAC,QAAQ,CAAC;IAClB,CAAC,MAAM;MACHA,IAAI,EAAE;IACV;EACJ;AACJ,CAAC,CAAC;AAEF,eAAeN,MAAM"},"metadata":{},"sourceType":"module"}