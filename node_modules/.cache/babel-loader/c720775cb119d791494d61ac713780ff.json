{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport routes from \"./routes\";\nimport store from \"@/store\";\nVue.use(VueRouter);\n\n//重写push、replace防止控制台报错\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\n//重写VueRouter.prototype身上的push方法\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (reject && resolve) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\n\n//重写VueRouter.prototype身上的replace方法\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (reject && resolve) {\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n};\nlet router = new VueRouter({\n  routes,\n  scrollBehavior() {\n    return {\n      y: 0\n    };\n  }\n});\n\n//全局守卫,前置守卫（在路由跳转之间进行判断)\nrouter.beforeEach((to, from, next) => {\n  //to:可以获取到你要跳转到那个路由信息\n  //from:可以获取到你从哪个路由而来的信息\n  //next:放行函数 next()放行 next(path)放行到指令路由\n  next();\n  //用户登录了,才会有token,未登录一定不会有token\n  let token = store.state.user.token;\n  if (token) {} else {}\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","routes","store","use","originPush","prototype","push","originReplace","replace","location","resolve","reject","call","router","scrollBehavior","y","beforeEach","to","from","next","token","state","user"],"sources":["D:/E-commerce/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport routes from \"./routes\";\nimport store from \"@/store\";\n\nVue.use(VueRouter);\n\n//重写push、replace防止控制台报错\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n\n//重写VueRouter.prototype身上的push方法\nVueRouter.prototype.push = function (location, resolve, reject) {\n    if (reject && resolve) {\n        originPush.call(this, location, resolve, reject);\n    } else {\n        originPush.call(\n            this,\n            location,\n            () => {},\n            () => {},\n        );\n    }\n};\n\n//重写VueRouter.prototype身上的replace方法\nVueRouter.prototype.replace = function (location, resolve, reject) {\n    if (reject && resolve) {\n        originReplace.call(this, location, resolve, reject);\n    } else {\n        originReplace.call(\n            this,\n            location,\n            () => {},\n            () => {},\n        );\n    }\n};\n\nlet router = new VueRouter({\n    routes,\n    scrollBehavior() {\n        return { y: 0 };\n    },\n});\n\n//全局守卫,前置守卫（在路由跳转之间进行判断)\nrouter.beforeEach((to, from, next) => {\n    //to:可以获取到你要跳转到那个路由信息\n    //from:可以获取到你从哪个路由而来的信息\n    //next:放行函数 next()放行 next(path)放行到指令路由\n    next();\n//用户登录了,才会有token,未登录一定不会有token\n    let token=store.state.user.token\n    if(token){\n    \n    }else {\n\n    }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAE3BH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;;AAElB;AACA,IAAII,UAAU,GAAGJ,SAAS,CAACK,SAAS,CAACC,IAAI;AACzC,IAAIC,aAAa,GAAGP,SAAS,CAACK,SAAS,CAACG,OAAO;;AAE/C;AACAR,SAAS,CAACK,SAAS,CAACC,IAAI,GAAG,UAAUG,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC5D,IAAIA,MAAM,IAAID,OAAO,EAAE;IACnBN,UAAU,CAACQ,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACpD,CAAC,MAAM;IACHP,UAAU,CAACQ,IAAI,CACX,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACX;EACL;AACJ,CAAC;;AAED;AACAT,SAAS,CAACK,SAAS,CAACG,OAAO,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC/D,IAAIA,MAAM,IAAID,OAAO,EAAE;IACnBH,aAAa,CAACK,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACvD,CAAC,MAAM;IACHJ,aAAa,CAACK,IAAI,CACd,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACX;EACL;AACJ,CAAC;AAED,IAAII,MAAM,GAAG,IAAIb,SAAS,CAAC;EACvBC,MAAM;EACNa,cAAc,GAAG;IACb,OAAO;MAAEC,CAAC,EAAE;IAAE,CAAC;EACnB;AACJ,CAAC,CAAC;;AAEF;AACAF,MAAM,CAACG,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC;EACA;EACA;EACAA,IAAI,EAAE;EACV;EACI,IAAIC,KAAK,GAAClB,KAAK,CAACmB,KAAK,CAACC,IAAI,CAACF,KAAK;EAChC,IAAGA,KAAK,EAAC,CAET,CAAC,MAAK,CAEN;AACJ,CAAC,CAAC;AAEF,eAAeP,MAAM"},"metadata":{},"sourceType":"module"}